!function(){"use strict";function e(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class t{constructor(t,s,r){let{data:i,handleDeleteCard:n,handleCardClick:o,handleLikeButton:a}=t;e(this,"_renderLikes",(()=>{this._element.querySelector(".cards__like-count").textContent=this._likes.length,this.isLiked()?this._cardLikeButton.classList.add(this._cardLikeActiveSelector):this._cardLikeButton.classList.remove(this._cardLikeActiveSelector)})),e(this,"getCardElement",(()=>(this._element=this._getCardTemplate(),this._imageElement=this._element.querySelector(this._imageElSelector),this._imageElement.style.backgroundImage="url(".concat(this._link,")"),this._element.querySelector(".cards__title").textContent=this._name,this._addEventListeners(),this._ownerId!==this._userId&&(this._cardDeleteButton.style.display="none"),this._renderLikes(),this._element))),this._name=i.name,this._link=i.link,this._likes=i.likes,this._handleCardClick=o,this._handleLikeButton=a,this._handleDeleteCard=n,this._id=i._id,this._cardSelector=s.cardSelector,this._cardLikeSelector=s.cardLikeSelector,this._cardLikeActiveSelector=s.cardLikeActiveSelector,this._cardDeleteSelector=s.cardDeleteSelector,this._imageElSelector=s.imageElSelector,this._userId=r,this._ownerId=i.owner._id,this._cardsTemplate=s.cardsTemplate,this._cardsTemplateSelector=s.cardsTemplateSelector,this._cardsTemplate=document.querySelector(this._cardsTemplateSelector)}_getCardTemplate(){return this._cardsTemplate.content.querySelector(this._cardSelector).cloneNode(!0)}isLiked(){return this._likes.some((e=>e._id===this._userId))}removeCard(){this._element.remove(),this._element=null}likeCard(e){this._likes=e,this._renderLikes()}_addEventListeners(){this._cardLikeButton=this._element.querySelector(this._cardLikeSelector),this._cardDeleteButton=this._element.querySelector(this._cardDeleteSelector),this._cardLikeButton.addEventListener("click",(()=>this._handleLikeButton(this._id))),this._cardDeleteButton.addEventListener("click",(()=>this._handleDeleteCard(this._id))),this._imageElement.addEventListener("click",(()=>{this._handleCardClick()}))}}function s(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class r{constructor(e,t){s(this,"_showInputError",((e,t)=>{const s=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),s.textContent=t,s.classList.add(this._errorClass)})),s(this,"_hideError",(e=>{const t=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)})),s(this,"_checkValidity",(e=>{e.validity.valid?this._hideError(e):this._showInputError(e,e.validationMessage)})),s(this,"_setEventListeners",(()=>{this._inputElements=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkValidity(e),this._toggleButtonState()}))}))})),s(this,"_checkIfFormValid",(()=>this._inputElements.every((e=>e.validity.valid)))),s(this,"_toggleButtonState",(()=>{this._checkIfFormValid()?(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1):(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0)})),this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}resetValidation(){this._toggleButtonState(),this._inputElements.forEach((e=>{this._hideError(e)}))}enableValidation(){this._formElement.addEventListener("submit",(e=>e.preventDefault())),this._setEventListeners()}}class i{constructor(e){var t,s;s=e=>{e.preventDefault(),"Escape"===e.key&&this.close()},(t="_handleEscClose")in this?Object.defineProperty(this,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):this[t]=s,this._popupElement=document.querySelector(e)}setEventListeners(){this._popupElement.addEventListener("click",(e=>{(e.target.classList.contains("popup")||e.target.classList.contains("button_type_close"))&&this.close()}))}open(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keyup",this._handleEscClose)}close(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keyup",this._handleEscClose)}}class n extends i{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".popup__form"),this._handleFormSubmit=t}_getInputValues(){const e=[...this._popupForm.querySelectorAll(".popup__input")],t={};return e.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this.close()})),super.setEventListeners()}close(){this._popupForm.reset(),super.close()}}function o(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}const a=document.querySelector(".popup__form_type_profile"),l=document.querySelector(".popup__form_type_add-card"),c=document.querySelector(".popup__form_type_avatar"),h=document.querySelector(".popup__input_description_name"),d=document.querySelector(".popup__input_description_job"),_=document.querySelector(".popup__input_avatarlink"),u=document.querySelector(".button_type_edit"),p=document.querySelector(".button_type_add"),m=document.querySelector(".profile__image-update-icon"),S={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".button_type_submit",inactiveButtonClass:"button_type_submit-disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"},v=(e,t)=>{e.querySelector(".button_type_submit").textContent=t},E=new class{constructor(e){o(this,"_checkResStatus",(e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))),o(this,"getInitialCards",(()=>fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then(this._checkResStatus))),o(this,"getUserInfo",(()=>fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then(this._checkResStatus))),o(this,"updateUserInfo",(e=>fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._checkResStatus))),o(this,"editUserAvatar",(e=>fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._checkResStatus))),o(this,"addNewCard",(e=>fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then(this._checkResStatus))),o(this,"deleteCard",(e=>fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then(this._checkResStatus))),o(this,"likeCard",(e=>fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then(this._checkResStatus))),o(this,"unLikeCard",(e=>fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers}).then(this._checkResStatus))),this._baseUrl=e.baseUrl,this._headers=e.headers}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"a68c011d-d292-456c-86c3-53eebc4a76ba","Content-Type":"application/json"}}),b=new class{constructor(e){let{profileNameSelector:t,profileJobSelector:s,profileImageSelector:r}=e;this._profileName=document.querySelector(t),this._profileJob=document.querySelector(s),this._profileImage=document.querySelector(r)}getUserInfo(){return{name:this._profileName.textContent,job:this._profileJob.textContent,avatarlink:this._profileImage.src}}setUserInfo(e){let{name:t,job:s,avatarlink:r}=e;this._profileName.textContent=t,this._profileJob.textContent=s,this._profileImage.src=r}}({profileNameSelector:".profile__name",profileJobSelector:".profile__job",profileImageSelector:".profile__image"});let f;Promise.all([E.getInitialCards(),E.getUserInfo()]).then((e=>{let[t,s]=e;f=s._id,k.render(t),b.setUserInfo({name:s.name,job:s.about,avatarlink:s.avatar})})).catch((e=>console.log("Error.....: ".concat(e))));const k=new class{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}render(e){e.forEach(this._renderer)}prependItem(e){this._container.prepend(e)}addItem(e){this._container.append(e)}}({renderer:e=>{k.addItem(C(e))}},".cards__list"),y=new class extends i{open(e){let{name:t,link:s}=e;this._popupElement.querySelector(".popup__caption").textContent=t,this._popupElement.querySelector(".popup__preview-image").src=s,this._popupElement.querySelector(".popup__preview-image").alt=t,super.open()}}(".popup_type_preview"),L=new class extends i{setAction(e){this._handleSubmit=e}setEventListeners(){this._popupElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit()})),super.setEventListeners()}}(".popup_type_delete-card");function C(e){const s=new t({data:e,handleCardClick:()=>{y.open(e)},handleLikeButton:e=>{s.isLiked()?E.unLikeCard(e).then((e=>{s.likeCard(e.likes)})).catch((e=>console.log("Error.....: ".concat(e)))):E.likeCard(e).then((e=>{s.likeCard(e.likes)})).catch((e=>console.log("Error.....: ".concat(e))))},handleDeleteCard:e=>{L.open(),L.setAction((()=>{E.deleteCard(e).then((()=>{s.removeCard(),L.close()})).catch((e=>console.log("Error.....: ".concat(e))))}))}},{cardsTemplateSelector:"#cards-template",cardSelector:".cards__card",imageElSelector:".cards__image",cardLikeSelector:".button_style_like",cardLikeActiveSelector:"button_style_full",cardDeleteSelector:".button_type_delete"},f);return s.getCardElement()}const g=new n(".popup_type_avatar",(e=>{let{avatarlink:t}=e;v(c,"Saving..."),E.editUserAvatar({avatar:t}).then((e=>{b.setUserInfo({name:e.name,job:e.about,avatarlink:e.avatar}),g.close()})).catch((e=>console.log("Error.....: ".concat(e)))).finally((()=>v(c,"Save")))})),I=new n(".popup_type_profile",(e=>{let{name:t,job:s}=e;v(a,"Saving..."),E.updateUserInfo({name:t,about:s}).then((e=>{b.setUserInfo({name:e.name,job:e.about,avatarlink:e.avatar}),I.close()})).catch((e=>console.log("Error.....: ".concat(e)))).finally((()=>v(a,"Save")))})),q=new n(".popup_type_add-card",(e=>{let{nameInput:t,linkInput:s}=e;v(l,"Saving..."),E.addNewCard({name:t,link:s}).then((e=>{k.prependItem(C(e)),q.close()})).catch((e=>console.log("Error.....: ".concat(e)))).finally((()=>v(l,"Create")))}));q.setEventListeners(),L.setEventListeners(),I.setEventListeners(),g.setEventListeners(),y.setEventListeners();const w=new r(S,c),U=new r(S,a),B=new r(S,l);w.enableValidation(),U.enableValidation(),B.enableValidation(),m.addEventListener("click",(()=>{w.resetValidation(),g.open();const e=b.getUserInfo();_.value=e.avatarlink})),p.addEventListener("click",(()=>{B.resetValidation(),q.open()})),u.addEventListener("click",(()=>{U.resetValidation(),I.open();const e=b.getUserInfo();h.value=e.name,d.value=e.job}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,